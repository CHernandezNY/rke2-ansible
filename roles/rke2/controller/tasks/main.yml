---
- name: Debian Based OS - Install Kube Control 
  block: 
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_split[0] }}.{{ k8s_version_split[1] }}/deb/Release.key"
      state: present
  
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: "deb https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_split[0] }}.{{ k8s_version_split[1] }}/deb/ /"
      state: present
      filename: kubernetes.list

  - name: Install Kubectl
    apt:
      name: "kubectl"
      state: present
      update_cache: true
      allow_downgrade: yes
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  when: ansible_os_family == "Debian"

- name: RedHat Based OS - Install Kube Control
  block:
  - name: Add Kubernetes repository
    ansible.builtin.yum_repository:
      name: kubernetes
      description: Kubernnetes
      baseurl: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_split[0] }}.{{ k8s_version_split[1] }}/rpm/
      enabled: true
      gpgcheck: true
      gpgkey: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version_split[0] }}.{{ k8s_version_split[1] }}/rpm/repodata/repomd.xml.key
      exclude: kubelet kubeadm kubectl

  - name: Install Kubectl
    yum:
      name: "kubectl"
      state: present
      update_cache: true
      allow_downgrade: yes
      disable_excludes: kubernetes
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  when: ansible_os_family == "RedHat"

- name: Create manifests directory on first controller
  file:
    path: /var/lib/rancher/rke2/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when: ansible_host == hostvars[groups['controller'][0]]['ansible_host'] | default(groups['controller'][0])

- name: Copy RKE2 service file
  register: rke2_service
  template:
    src: "rke2.service.j2"
    dest: "{{ systemd_dir }}/rke2.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and wait for rke2 service (may take 10 min per controller)
  systemd:
    name: rke2
    daemon_reload: yes
    state: restarted
    enabled: yes
  register: service
  until: service.failed == false
  retries: 10
  delay: 15

- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/rke2/server/node-token

- name: Register node-token file access mode
  stat:
    path: /var/lib/rancher/rke2/server
  register: p

- name: Change file access node-token
  file:
    path: /var/lib/rancher/rke2/server
    mode: "g+rx,o+rx"

- name: Read node-token from controller
  slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: node_token

- name: Store controller node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  file:
    path: /var/lib/rancher/rke2/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Update kube config file with api vip
  replace:
    path: ~{{ ansible_user }}/.kube/config
    regexp: '127.0.0.1'
    replace: '{{ apiserver_endpoint }}'

- name: Copy kube config file to bastion host
  ansible.builtin.fetch:
    src: /home/{{ ansible_user }}/.kube/config
    dest: ~/.kube/config
    flat: yes
  when: ansible_host == hostvars[groups['controller'][0]]['ansible_host'] | default(groups['controller'][0])
    